/* @(#)56	1.3  src/tcpip/usr/lib/libisode/DASE-types.h, isodelib7, tcpip411, GOLD410 4/5/93 13:32:37 */
/*
 * COMPONENT_NAME: (ISODELIB7) ISODE Libraries, Release 7
 *
 * FUNCTIONS: free_DASE_Callback__REQ free_DASE_Callback__RSP 
 *    free_DASE_Environment free_DASE_Message free_DASE_Pair 
 *    free_DASE_Provider__RSP free_DASE_Query__REQ free_DASE_Query__RSP
 *
 * ORIGINS: 60
 *
 * FILE:	src/tcpip/usr/lib/libisode/DASE-types.h
 */

/* automatically generated by pepsy 6.0 #108 (oilers.netmgmt.austin.ibm.com), do not edit! */

#ifndef	_module_DASE_defined_
#define	_module_DASE_defined_

#ifndef	PEPSY_VERSION
#define	PEPSY_VERSION		2
#endif

#include <isode/psap.h>
#include <isode/pepsy.h>
#include <isode/pepsy/UNIV-types.h>

#include <isode/pepsy/DASE_defs.h>

struct type_DASE_Query__REQ {
    struct element_DASE_0 {
        struct	qbuf	*IA5String;

        struct element_DASE_0 *next;
    } *name;

    char    interactive;

    struct element_DASE_1 {
        struct type_DASE_Environment *Environment;

        struct element_DASE_1 *next;
    } *envlist;

    struct	qbuf	*context;

    struct	qbuf	*userdn;

    struct	qbuf	*passwd;
};
#define	free_DASE_Query__REQ(parm)\
	(void) fre_obj((char *) parm, _ZDASE_mod.md_dtab[_ZQuery_REQDASE], &_ZDASE_mod, 1)

struct type_DASE_Environment {
    integer     upper;

    integer     lower;

    struct element_DASE_2 {
        struct	qbuf	*IA5String;

        struct element_DASE_2 *next;
    } *path;
};
#define	free_DASE_Environment(parm)\
	(void) fre_obj((char *) parm, _ZDASE_mod.md_dtab[_ZEnvironmentDASE], &_ZDASE_mod, 1)

struct type_DASE_Callback__REQ {
    struct	qbuf	*string;

    struct element_DASE_3 {
        struct type_DASE_Pair *Pair;

        struct element_DASE_3 *next;
    } *choices;
};
#define	free_DASE_Callback__REQ(parm)\
	(void) fre_obj((char *) parm, _ZDASE_mod.md_dtab[_ZCallback_REQDASE], &_ZDASE_mod, 1)

struct type_DASE_Pair {
    struct	qbuf	*friendly;

    struct	qbuf	*complete;
};
#define	free_DASE_Pair(parm)\
	(void) fre_obj((char *) parm, _ZDASE_mod.md_dtab[_ZPairDASE], &_ZDASE_mod, 1)

struct type_DASE_Callback__RSP {
        struct	qbuf	*IA5String;

        struct type_DASE_Callback__RSP *next;
};
#define	free_DASE_Callback__RSP(parm)\
	(void) fre_obj((char *) parm, _ZDASE_mod.md_dtab[_ZCallback_RSPDASE], &_ZDASE_mod, 1)

struct type_DASE_Query__RSP {
    struct	qbuf	*friendly;

    PE      name;

    PE      value;

    struct	qbuf	*diagnostic;
};
#define	free_DASE_Query__RSP(parm)\
	(void) fre_obj((char *) parm, _ZDASE_mod.md_dtab[_ZQuery_RSPDASE], &_ZDASE_mod, 1)

struct type_DASE_Message {
    int         offset;
#define	type_DASE_Message_query__request	1
#define	type_DASE_Message_callback__request	2
#define	type_DASE_Message_callback__response	3
#define	type_DASE_Message_query__response	4

    union {
        struct type_DASE_Query__REQ *query__request;

        struct type_DASE_Callback__REQ *callback__request;

        struct type_DASE_Callback__RSP *callback__response;

        struct type_DASE_Query__RSP *query__response;
    }       un;
};
#define	free_DASE_Message(parm)\
	(void) fre_obj((char *) parm, _ZDASE_mod.md_dtab[_ZMessageDASE], &_ZDASE_mod, 1)

struct type_DASE_Provider__RSP {
    int         offset;
#define	type_DASE_Provider__RSP_callback	1
#define	type_DASE_Provider__RSP_answer	2

    union {
        struct type_DASE_Callback__REQ *callback;

        struct type_DASE_Query__RSP *answer;
    }       un;
};
#define	free_DASE_Provider__RSP(parm)\
	(void) fre_obj((char *) parm, _ZDASE_mod.md_dtab[_ZProvider_RSPDASE], &_ZDASE_mod, 1)
#endif
